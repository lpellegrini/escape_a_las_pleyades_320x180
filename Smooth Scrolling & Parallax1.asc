//////////////////////////////////////
//Smooth Scrolling + Parallax Module//
//////////////////////////////////////
//
// Abstract: A module designed to make the screen scroll 
// smoothly as the player character moves around. It can
// also move room objects to create a parallax effect.
// The module is intended to be platform and resolution 
// independent.
//
// Module version 1.7.1
// by Alasdair Beckett, based on code by Steve McCrea.
//
//
////////////////////////
//Required Properties://
////////////////////////
//
// Before starting, you must create the following properties 
// in AGS. 
//
// NOTE: You must do this even if you do not plan to use
//  the parallax effect. It doesn't take long, but I'm sorry 
//  all the same.
//
// PxPos:
//
//  Name: PxPos
//  Description: Stores an object's parallax position
//  Type: Number
//  Default Value: 0
//
// PxView:
//
//  Name: PxView
//  Description: Stores the pixel-adjustment view number
//  Type: Number
//  Default Value: 0
//
// PxLoop:
//
//  Name: PxLoop
//  Description: Stores the pixel-adjustment loop number
//  Type: Number
//  Default Value: 0
//
//
/////////////////////////////////
//Creating the Parallax Effect://
/////////////////////////////////
//
// To create a simple parallax effect, alter an object's 
// PxPos property. Positive values will place it in the 
// foreground, while negative values will place it in the
// background. See below for more detail:
//
// 7   = Foreground (300% Scrolling Speed)
// 6   = Foreground (250% Scrolling Speed)
// 5   = Foreground (200% Scrolling Speed)
// 4   = Foreground (150% Scrolling Speed)
// 3   = Foreground (Scrolling Speed)
// 2   = Foreground (50% Scrolling Speed)
// 1   = Foreground (25% Scrolling Speed)
//
// 0   = No Parallax Effect (default)
//
// -1  = Background (25% Scrolling Speed)
// -2  = Background (50% Scrolling Speed)
// -3  = Background (Scrolling Speed) - Moon & sun etc.
// -4  = Background (150% Scrolling Speed) Lens flares etc.
// -5 = Background (200% Scrolling Speed) Lens flare etc.
// -6- = Background (250% Scrolling Speed) Lens flare etc.
// -7- = Background (300% Scrolling Speed) Lens flare etc.
//
// If you want to make subtle adjustments to the speeds
// you can alter the values in the module script, but 
// objects with PxPos 0 must remain uneffected by parallax.
//
//
/////////////////////
//About Functions: //
/////////////////////
//
// function SmoothScroll_PxOn()
//  Makes all parallax objects invisible. 
//  NOTE: Call this to allow users to switch the effect
//   off on slow computers.
//
// function SmoothScroll_PxOff()
//  Makes the parallax objects visible again.
//
// function SmoothScroll_StopScroll()
//  Waits until the screen has stopped moving before 
//  allowing the game to continue.
//  NOTE: Call before running dialogue sequences. Also, 
//   if you are using Sierra Style speech, Dualnames 
//   reports that it is necessary to call this function 
//   in a hotspot script if the player walks to the hotspot 
//   before speaking.
//
// function SmoothScroll_ScrollingOff()
//  Turns the scrolling effect off.
//  NOTE: The parallax effect looks much nicer with smooth 
//   scrolling, but this might be useful if your game uses 
//   keyboard control.
//
// function SmoothScroll_ScrollingOn()
//  Turns the scrolling effect back on.
//
//
/////////////////////
//About Variables: //
/////////////////////
//
// NOTE: Treat these as read-only. To switch effect on 
//  and off use the functions above.
//
// bool SmoothScroll_ScrollStatus;
//  True if scrolling is on, false if scrolling is off.
//
// bool SmoothScroll_PxStatus;
//  True if parallax is on, false if parallax is off.
// 
//
////////////////////////////
//For old versions of AGS://
////////////////////////////
// I haven't tested the module in versions earlier than 3.2.
// Old versions of AGS didn't allow pixel perfect scrolling
// above 320x240. So you can use the following hack (or just 
// use an up-to-date version of AGS).
//
// It is possible to smooth the motion of objects with
// a PxPos of 2, 1, -1 and -2 (objects that move slower 
// than the scrolling speed). For this to work you must 
// create four versions of the object graphic.
//
// Version 1: the original image.
// Version 2: The image moved 1 pixel to the right.
// Version 3: The image moved 1 pixel down.
// Version 4: The image moved 1 pixel down and 1 pixel right.
//
// Arrange the four sprites as frames 0-3 of one loop of
// a view. Then alter the PxView and PxLoop values of the 
// object to the view & loop number containing the object's 
// images.
//
// NOTE: This smoothing technique will prevent you from
//  animating the object in question. Objects that must
//  be animated cannot currently be smoothed.
//
//
/////////////////////////////////
//Conflicts With Verbcoin GUIs://
//////////////////////////////////
//
// This module can cause problems with verb coin GUIs, 
// including Electroshokker's module which comes with AGS.
//
// This is because it is possible for the screen to scroll 
// between the time in which a player clicks on a hotspot
// and the time that the verbcoin appears.
//
// To get round the problem you need to alter the verbcoin
// script so that it monitors the difference between the 
// Viewport's X and Y positions when the player clicks and
// when the verbcoin appears, and then use that information
// in relation to the current mouse position to work out
// where the player clicked originally in terms of the room.
//

//
//
//////////////////
//Module History//
//////////////////
// v1.7.1 Fixed bug that disabled parallax when smooth scrolling 
//        was off.
//
// v1.7 - Added targetCharacter pointer to make camera animation 
//        possible without switching player characters.
//
// v1.6 - Added LucasArts style scrolling triggered by proximity 
//        to the edge of the screen.
//
// v1.5 - Fixed a major problem with objects not returning to the
//        correct position when leaving and re-entering a room.
//
// v1.4 - Cleaned up script and improved suspension of scrolling 
//        effect.
//        Added this module history!
//
// v1.3 - Added option to switch smooth scrolling off and on.
//
// v1.2 - A wider range of parrallax speeds.
//        Less jerky stopping.
//        Pixel perfect object movement at slow speeds (not for 
//        animated objects, requires a bit of work).
//        Up to 25 parrallax objects.
//        Smooth sun/moon parrallax.
//        LENS FLARE EFFECT!
//
// v1.1 - Formatted module according to AGS programming conventions.
//
//
////////////
//License://
////////////
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation 
// files (the "Software"), to deal in the Software without 
// restriction, including without limitation the rights to use, 
// copy, modify, merge, publish, distribute, sublicense, and/or 
// sell copies of the Software, and to permit persons to whom the 
// Software is furnished to do so, subject to the following 
// conditions:
//
// The above copyright notice and this permission notice shall be 
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
// OTHER DEALINGS IN THE SOFTWARE.


//////////////
//Variables://
//////////////

Object *PxObj[25]; //increase value for more parallax objects

Character *targetCharacter;

int PxObjStartX[25]; //increase value for more parallax objects
int PxObjStartY[25]; //increase value for more parallax objects
int PxObjOriginX[25]; //increase value for more parallax objects
int PxObjOriginY[25]; //increase value for more parallax objects
int NumberObj=0;
int ScreenWidth;
int HalfScreenWidth;
int ScreenHeight;
int HalfScreenHeight;
int TargetScreenX;
int TargetScreenY;
int TargetPointX;
int TargetPointY;
int TargetPosX;
int TargetPosY;
int TargetVelocityX;
int TargetVelocityY;
int Count;

int EdgeY = 250;
int EdgeX = 350;

float ScrollSpeedX = 0.0;
float ScrollSpeedY = 0.0;
float ScreenCentreX = 0.0;
float ScreenCentreY = 0.0;
float ScrollOffsetX;
float ScrollOffsetY;

float customScrollSpeedX = 25.0; // pixels per second
float slowDownRangeX = 150.0; // pixels	
float customScrollSpeedY = 20.0; // pixels per second
float slowDownRangeY = 100.0; // pixels	
float timeStep = 0.2;

bool SmoothScroll_ScrollStatus = true;
bool SmoothScroll_PxStatus = true;
bool ScrollingAllowedX = false;
bool ScrollingAllowedY = false;
bool Centring = false;

////////////////
//Main Script://
////////////////


/////////////////////
//Custom functions://
/////////////////////

function PositionObj(){

  int objectpass=0;
  
  float fractionx;
  
  float fractiony;

  while (objectpass<NumberObj){ // Scroll through the parallax objects.
  
    // Position the object based on its PxPos value:
    
    //For AGS Beta.
    //Will cause problems during fade-in using AGS 3.0 and earlier.
    
    int viewx = GetViewportX();
    
    int viewy = GetViewportY();
    
    //For AGS 3.0.
    //Will cause stationary objects (PxPos: -3) to judder.

    //int viewx = FloatToInt(ScreenCentreX, eRoundNearest) - HalfScreenWidth;  

    //int viewy = FloatToInt(ScreenCentreY, eRoundNearest) - HalfScreenHeight;
    
    
    if (PxObj[objectpass].GetProperty("PxPos")==7) {

      PxObj[objectpass].X=PxObjOriginX[objectpass]-FloatToInt(IntToFloat(viewx)*3.0); //Move the object in opposite direction to the screen scrolling, at 150% of the scrolling speed.

      PxObj[objectpass].Y=PxObjOriginY[objectpass]-FloatToInt(IntToFloat(viewy)*3.0); 
    
    }
    
    else if (PxObj[objectpass].GetProperty("PxPos")==6) {

      PxObj[objectpass].X=PxObjOriginX[objectpass]-FloatToInt(IntToFloat(viewx)*2.5); //Move the object in opposite direction to the screen scrolling, at 150% of the scrolling speed.

      PxObj[objectpass].Y=PxObjOriginY[objectpass]-FloatToInt(IntToFloat(viewy)*2.5); 

    }

    else if (PxObj[objectpass].GetProperty("PxPos")==5) {

      PxObj[objectpass].X=PxObjOriginX[objectpass]-FloatToInt(IntToFloat(viewx)*2.0); //Move the object in opposite direction to the screen scrolling, at 150% of the scrolling speed.

      PxObj[objectpass].Y=PxObjOriginY[objectpass]-FloatToInt(IntToFloat(viewy)*2.0); 
 
    }

    else if (PxObj[objectpass].GetProperty("PxPos")==4) {

      PxObj[objectpass].X=PxObjOriginX[objectpass]-FloatToInt(IntToFloat(viewx)*1.5); //Move the object in opposite direction to the screen scrolling, at 150% of the scrolling speed.

      PxObj[objectpass].Y=PxObjOriginY[objectpass]-FloatToInt(IntToFloat(viewy)*1.5); 
      
    }
    
    else if (PxObj[objectpass].GetProperty("PxPos")==3) {
         
      PxObj[objectpass].X=PxObjOriginX[objectpass]-viewx; //Move the object in opposite direction to the screen scrolling, at the same speed as the scrolling.

      PxObj[objectpass].Y=PxObjOriginY[objectpass]-viewy;    
            
    }
      
    else if (PxObj[objectpass].GetProperty("PxPos")==2) {
      
      PxObj[objectpass].X=PxObjOriginX[objectpass]-FloatToInt(IntToFloat(viewx)/2.0); //Move the object in opposite direction to the screen scrolling, at half the speed of the scrolling.

      PxObj[objectpass].Y=PxObjOriginY[objectpass]-FloatToInt(IntToFloat(viewy)/2.0);

      if (PxObj[objectpass].GetProperty("PxView")!=0){
               
          fractionx = (IntToFloat(viewx)/2.0)-IntToFloat(FloatToInt(IntToFloat(viewx)/2.0, eRoundDown));
          
          fractiony = (IntToFloat(viewy)/2.0)-IntToFloat(FloatToInt(IntToFloat(viewy)/2.0, eRoundDown));
          
          if (fractionx<0.5&&fractiony<0.5) PxObj[objectpass].SetView (PxObj[objectpass].GetProperty("PxView"), PxObj[objectpass].GetProperty("PxLoop"), 3); // offset 1px to the right and 1px downwards
          
          else if (fractionx>=0.5&&fractiony<0.5) PxObj[objectpass].SetView (PxObj[objectpass].GetProperty("PxView"), PxObj[objectpass].GetProperty("PxLoop"), 2); //offset 1px downwards

          else if (fractionx<0.5&&fractiony>=0.5) PxObj[objectpass].SetView (PxObj[objectpass].GetProperty("PxView"), PxObj[objectpass].GetProperty("PxLoop"), 1); //offset 1px to the right

          else if (fractionx>=0.5&&fractiony>=0.5) PxObj[objectpass].SetView (PxObj[objectpass].GetProperty("PxView"), PxObj[objectpass].GetProperty("PxLoop"), 0); //normal object graphic

      }

    }

    else if (PxObj[objectpass].GetProperty("PxPos")==1) {
      
      PxObj[objectpass].X=PxObjOriginX[objectpass]-FloatToInt(IntToFloat(viewx)/4.0); //Move the object in opposite direction to the screen scrolling, at a quarter of the speed of the scrolling.

      PxObj[objectpass].Y=PxObjOriginY[objectpass]-FloatToInt(IntToFloat(viewy)/4.0); 
      
      
      if (PxObj[objectpass].GetProperty("PxView")!=0){
      
        fractionx = (IntToFloat(viewx)/4.0)-IntToFloat(FloatToInt(IntToFloat(viewx)/4.0, eRoundDown));
        
        fractiony = (IntToFloat(viewy)/4.0)-IntToFloat(FloatToInt(IntToFloat(viewy)/4.0, eRoundDown));
        
        if (fractionx<0.5&&fractiony<0.5) PxObj[objectpass].SetView (PxObj[objectpass].GetProperty("PxView"), PxObj[objectpass].GetProperty("PxLoop"), 3); // offset 1px to the right and 1px downwards
        
        else if (fractionx>=0.5&&fractiony<0.5) PxObj[objectpass].SetView (PxObj[objectpass].GetProperty("PxView"), PxObj[objectpass].GetProperty("PxLoop"), 2); //offset 1px downwards

        else if (fractionx<0.5&&fractiony>=0.5) PxObj[objectpass].SetView (PxObj[objectpass].GetProperty("PxView"), PxObj[objectpass].GetProperty("PxLoop"), 1); //offset 1px to the right

        else if (fractionx>=0.5&&fractiony>=0.5) PxObj[objectpass].SetView (PxObj[objectpass].GetProperty("PxView"), PxObj[objectpass].GetProperty("PxLoop"), 0); //normal object graphic

      }
      
      }

    else if (PxObj[objectpass].GetProperty("PxPos")==-1){
    
      PxObj[objectpass].X=PxObjOriginX[objectpass]+FloatToInt(IntToFloat(viewx)/4.0); //Move the object in same direction as the screen scrolling, at a quarter of the speed of the scrolling.

      PxObj[objectpass].Y=PxObjOriginY[objectpass]+FloatToInt(IntToFloat(viewy)/4.0); 
      
      if (PxObj[objectpass].GetProperty("PxView")!=0){
      
        fractionx = (IntToFloat(viewx)/4.0)-IntToFloat(FloatToInt(IntToFloat(viewx)/4.0, eRoundDown));
        
        fractiony = (IntToFloat(viewy)/4.0)-IntToFloat(FloatToInt(IntToFloat(viewy)/4.0, eRoundDown));
        
        if (fractionx<0.5&&fractiony<0.5) PxObj[objectpass].SetView (PxObj[objectpass].GetProperty("PxView"), PxObj[objectpass].GetProperty("PxLoop"), 0); // normal object graphic
        
        else if (fractionx>=0.5&&fractiony<0.5) PxObj[objectpass].SetView (PxObj[objectpass].GetProperty("PxView"), PxObj[objectpass].GetProperty("PxLoop"), 1); //offset 1px to the right

        else if (fractionx<0.5&&fractiony>=0.5) PxObj[objectpass].SetView (PxObj[objectpass].GetProperty("PxView"), PxObj[objectpass].GetProperty("PxLoop"), 2); //offset 1px downwards

        else if (fractionx>=0.5&&fractiony>=0.5) PxObj[objectpass].SetView (PxObj[objectpass].GetProperty("PxView"), PxObj[objectpass].GetProperty("PxLoop"), 3); //offset 1px to the right and 1px downwards

      }
      
      }
    
    else if (PxObj[objectpass].GetProperty("PxPos")==-2) {
        
      PxObj[objectpass].X=PxObjOriginX[objectpass]+FloatToInt(IntToFloat(viewx)/2.0); //Move the object in same direction as the screen scrolling, at a half of the speed of the scrolling.

      PxObj[objectpass].Y=PxObjOriginY[objectpass]+FloatToInt(IntToFloat(viewy)/2.0);
      
      if (PxObj[objectpass].GetProperty("PxView")!=0){
      
        fractionx = (IntToFloat(viewx)/2.0)-IntToFloat(FloatToInt(IntToFloat(viewx)/2.0, eRoundDown));
        
        fractiony = (IntToFloat(viewy)/2.0)-IntToFloat(FloatToInt(IntToFloat(viewy)/2.0, eRoundDown));
        
        if (fractionx<0.5&&fractiony<0.5) PxObj[objectpass].SetView (PxObj[objectpass].GetProperty("PxView"), PxObj[objectpass].GetProperty("PxLoop"), 0); // normal object graphic
        
        else if (fractionx>=0.5&&fractiony<0.5) PxObj[objectpass].SetView (PxObj[objectpass].GetProperty("PxView"), PxObj[objectpass].GetProperty("PxLoop"), 1); //offset 1px to the right

        else if (fractionx<0.5&&fractiony>=0.5) PxObj[objectpass].SetView (PxObj[objectpass].GetProperty("PxView"), PxObj[objectpass].GetProperty("PxLoop"), 2); //offset 1px downwards

        else if (fractionx>=0.5&&fractiony>=0.5) PxObj[objectpass].SetView (PxObj[objectpass].GetProperty("PxView"), PxObj[objectpass].GetProperty("PxLoop"), 3); //offset 1px to the right and 1px downwards

      }
      
      }
    
    else if (PxObj[objectpass].GetProperty("PxPos")==-3) {
        
      PxObj[objectpass].X=PxObjOriginX[objectpass] + viewx; //Keep the object in the same place relative to the screen during scrolling.
      
      PxObj[objectpass].Y=PxObjOriginY[objectpass] + viewy;
      
      }
    
    else if (PxObj[objectpass].GetProperty("PxPos")==-4) {
        
      PxObj[objectpass].X=PxObjOriginX[objectpass]+FloatToInt(IntToFloat(viewx)*1.5); //Move the object in same direction as the screen scrolling, at 150% of the speed of the scrolling

      PxObj[objectpass].Y=PxObjOriginY[objectpass]+FloatToInt(IntToFloat(viewy)*1.5); 
      
      }
    
    else if (PxObj[objectpass].GetProperty("PxPos")==-5){
    
      PxObj[objectpass].X=PxObjOriginX[objectpass]+FloatToInt(IntToFloat(viewx)*2.0); //Move the object in same direction as the screen scrolling, at 200% of the speed of the scrolling

      PxObj[objectpass].Y=PxObjOriginY[objectpass]+FloatToInt(IntToFloat(viewy)*2.0); 
      
    }
    
    else if (PxObj[objectpass].GetProperty("PxPos")==-6){
    
      PxObj[objectpass].X=PxObjOriginX[objectpass]+FloatToInt(IntToFloat(viewx)*2.5); //Move the object in same direction as the screen scrolling, at 250% of the speed of the scrolling

      PxObj[objectpass].Y=PxObjOriginY[objectpass]+FloatToInt(IntToFloat(viewy)*2.5); 
      
    }
    
    else if (PxObj[objectpass].GetProperty("PxPos")==-7){
    
      PxObj[objectpass].X=PxObjOriginX[objectpass]+FloatToInt(IntToFloat(viewx)*3.0); //Move the object in same direction as the screen scrolling, at 300% of the speed of the scrolling

      PxObj[objectpass].Y=PxObjOriginY[objectpass]+FloatToInt(IntToFloat(viewy)*3.0); 
      
  }
  
    objectpass++;
    
  }

}



function GetTargetMiddleY(){
  
  ViewFrame *TargetSprite;

  TargetSprite = Game.GetViewFrame(targetCharacter.NormalView, targetCharacter.Loop, 0); // Set Pointer to their current Normal View
      
  float scaling = IntToFloat(GetScalingAt(targetCharacter.x, targetCharacter.y))/100.00; //Work out the speaker's scaling as a decimal. old: IntToFloat(player.Scaling)/100.00; 
          
  int TargetMiddleY = targetCharacter.y - FloatToInt((IntToFloat(Game.SpriteHeight[TargetSprite.Graphic])*scaling)/2.0);
  
  
  return (TargetMiddleY);
  
  }
  
function GetTargetHeight(){
  
  ViewFrame *TargetSprite;

  TargetSprite = Game.GetViewFrame(targetCharacter.NormalView, targetCharacter.Loop, 0); // Set Pointer to their current Normal View
  
  float scaling = IntToFloat(GetScalingAt(targetCharacter.x, targetCharacter.y))/100.00; //Work out the speaker's scaling as a decimal. old: IntToFloat(player.Scaling)/100.00; 
  
  int TargetHeight = FloatToInt (IntToFloat(Game.SpriteHeight[TargetSprite.Graphic])*scaling);

  return (TargetHeight);

  }

function SmoothScroll_Centre(){
      
  if (targetCharacter.x<HalfScreenWidth) ScreenCentreX=IntToFloat(HalfScreenWidth);
  else if (targetCharacter.x>Room.Width-HalfScreenWidth) ScreenCentreX=IntToFloat(Room.Width-HalfScreenWidth);
  else ScreenCentreX=IntToFloat(targetCharacter.x);

  if (GetTargetMiddleY()<HalfScreenHeight) ScreenCentreY=IntToFloat(HalfScreenHeight);
  else if (GetTargetMiddleY()>Room.Height-HalfScreenHeight) ScreenCentreY=IntToFloat(Room.Height-HalfScreenHeight);
  else ScreenCentreY= IntToFloat(GetTargetMiddleY());  
  
  }

function SetOrigins (){ // A function which alters the starting position of objects.
                        // depending on how fast they will move.
  int objectpass=0;
  while (objectpass<Room.ObjectCount){
    
    if (object[objectpass].GetProperty("PxPos")!=0) {     
 
			PxObj[NumberObj]=object[objectpass];

			if (object[objectpass].GetProperty("PxPos")==7){
			  
			  //Set horizontal origin for object:
			  PxObjStartX[NumberObj]= object[objectpass].X;
				PxObjOriginX[NumberObj] = object[objectpass].X + FloatToInt((IntToFloat(object[objectpass].X)/IntToFloat(Room.Width))*(IntToFloat(Room.Width-System.ViewportWidth)*3.0));

      //Set vertical origin for object:
				PxObjStartY[NumberObj]=object[objectpass].Y;
				PxObjOriginY[NumberObj]= object[objectpass].Y + FloatToInt((IntToFloat(object[objectpass].Y)/IntToFloat(Room.Height))*(IntToFloat(Room.Height-System.ViewportHeight)*3.0));
			
			}

			else if (object[objectpass].GetProperty("PxPos")==6){
			  
			  //Set horizontal origin for object:
			  PxObjStartX[NumberObj]= object[objectpass].X;
				PxObjOriginX[NumberObj] = object[objectpass].X + FloatToInt((IntToFloat(object[objectpass].X)/IntToFloat(Room.Width))*(IntToFloat(Room.Width-System.ViewportWidth)*2.5));

        //Set vertical origin for object:
				PxObjStartY[NumberObj]=object[objectpass].Y;
				PxObjOriginY[NumberObj]= object[objectpass].Y + FloatToInt((IntToFloat(object[objectpass].Y)/IntToFloat(Room.Height))*(IntToFloat(Room.Height-System.ViewportHeight)*2.5));
			
			}

			else if (object[objectpass].GetProperty("PxPos")==5){
			  
			  //Set horizontal origin for object:
			  PxObjStartX[NumberObj]= object[objectpass].X;
				PxObjOriginX[NumberObj] = object[objectpass].X + FloatToInt((IntToFloat(object[objectpass].X)/IntToFloat(Room.Width))*(IntToFloat(Room.Width-System.ViewportWidth)*2.0));

        //Set vertical origin for object:
				PxObjStartY[NumberObj]=object[objectpass].Y;
				PxObjOriginY[NumberObj]= object[objectpass].Y + FloatToInt((IntToFloat(object[objectpass].Y)/IntToFloat(Room.Height))*(IntToFloat(Room.Height-System.ViewportHeight)*2.0));
			
			}

			else if (object[objectpass].GetProperty("PxPos")==4){
			  
			  //Set horizontal origin for object:
			  PxObjStartX[NumberObj]= object[objectpass].X;
				PxObjOriginX[NumberObj] = object[objectpass].X + FloatToInt((IntToFloat(object[objectpass].X)/IntToFloat(Room.Width))*(IntToFloat(Room.Width-System.ViewportWidth)*1.5));

        //Set vertical origin for object:
				PxObjStartY[NumberObj]=object[objectpass].Y;
				PxObjOriginY[NumberObj]= object[objectpass].Y + FloatToInt((IntToFloat(object[objectpass].Y)/IntToFloat(Room.Height))*(IntToFloat(Room.Height-System.ViewportHeight)*1.5));
			
			}

			else if (object[objectpass].GetProperty("PxPos")==3){
        	  
			  //Set horizontal origin for object:
			  PxObjStartX[NumberObj]= object[objectpass].X;
				PxObjOriginX[NumberObj] = object[objectpass].X + FloatToInt((IntToFloat(object[objectpass].X)/IntToFloat(Room.Width))*IntToFloat(Room.Width-System.ViewportWidth));

        //Set vertical origin for object:
				PxObjStartY[NumberObj]=object[objectpass].Y;
				PxObjOriginY[NumberObj]= object[objectpass].Y + FloatToInt((IntToFloat(object[objectpass].Y)/IntToFloat(Room.Height))*IntToFloat(Room.Height-System.ViewportHeight));
			
			}			
	
			else if (object[objectpass].GetProperty("PxPos")==2){
			  
			  //Set horizontal origin for object:
			  PxObjStartX[NumberObj]= object[objectpass].X;
				PxObjOriginX[NumberObj] = object[objectpass].X + FloatToInt((IntToFloat(object[objectpass].X)/IntToFloat(Room.Width))*(IntToFloat(Room.Width-System.ViewportWidth)/2.0));
        
				//Set vertical origin for object:
				PxObjStartY[NumberObj]=object[objectpass].Y;
				PxObjOriginY[NumberObj]= object[objectpass].Y + FloatToInt((IntToFloat(object[objectpass].Y)/IntToFloat(Room.Height))*(IntToFloat(Room.Height-System.ViewportHeight)/2.0));
        
			}
			
			else if (object[objectpass].GetProperty("PxPos")==1){
        
			  //Set horizontal origin for object:
			  PxObjStartX[NumberObj]= object[objectpass].X;
				PxObjOriginX[NumberObj] = object[objectpass].X + FloatToInt((IntToFloat(object[objectpass].X)/IntToFloat(Room.Width))*(IntToFloat(Room.Width-System.ViewportWidth)/4.0));
        
				//Set vertical origin for object:
				PxObjStartY[NumberObj]=object[objectpass].Y;
				PxObjOriginY[NumberObj]= object[objectpass].Y + FloatToInt((IntToFloat(object[objectpass].Y)/IntToFloat(Room.Height))*(IntToFloat(Room.Height-System.ViewportHeight)/4.0));
			
			}
			
			else if (object[objectpass].GetProperty("PxPos")==-1){
			  
			  //Set horizontal origin for object:
			  PxObjStartX[NumberObj]=object[objectpass].X;
			  PxObjOriginX[NumberObj]=object[objectpass].X -  FloatToInt((IntToFloat(object[objectpass].X)/IntToFloat(Room.Width))*(IntToFloat(Room.Width-System.ViewportWidth)/4.0));

			  
			  //Set vertical origin for object:
			  PxObjStartY[NumberObj]=object[objectpass].Y;
			  PxObjOriginY[NumberObj]=object[objectpass].Y - FloatToInt((IntToFloat(object[objectpass].Y)/IntToFloat(Room.Height))*(IntToFloat(Room.Height-System.ViewportHeight)/4.0));

			}	
			
			else if (object[objectpass].GetProperty("PxPos")==-2){
			  
			  //Set horizontal origin for object:
			  PxObjStartX[NumberObj]= object[objectpass].X;
				PxObjOriginX[NumberObj] = object[objectpass].X - FloatToInt((IntToFloat(object[objectpass].X)/IntToFloat(Room.Width))*(IntToFloat(Room.Width-System.ViewportWidth)/2.0));
        
				//Set vertical origin for object:
				PxObjStartY[NumberObj]=object[objectpass].Y;
				PxObjOriginY[NumberObj]= object[objectpass].Y - FloatToInt((IntToFloat(object[objectpass].Y)/IntToFloat(Room.Height))*(IntToFloat(Room.Height-System.ViewportHeight)/2.0));

			}	
				
			else if (object[objectpass].GetProperty("PxPos")==-3){
			  
			  //Set horizontal origin for object:
			  PxObjStartX[NumberObj]= object[objectpass].X;
				PxObjOriginX[NumberObj] = object[objectpass].X - FloatToInt((IntToFloat(object[objectpass].X)/IntToFloat(Room.Width))*IntToFloat(Room.Width-System.ViewportWidth));

        //Set vertical origin for object:
				PxObjStartY[NumberObj]=object[objectpass].Y;
				PxObjOriginY[NumberObj]= object[objectpass].Y - FloatToInt((IntToFloat(object[objectpass].Y)/IntToFloat(Room.Height))*IntToFloat(Room.Height-System.ViewportHeight));

      }
    			
			else if (object[objectpass].GetProperty("PxPos")==-4){
        
        //Set horizontal origin for object:
			  PxObjStartX[NumberObj]= object[objectpass].X;
				PxObjOriginX[NumberObj] = object[objectpass].X - FloatToInt((IntToFloat(object[objectpass].X)/IntToFloat(Room.Width))*(IntToFloat(Room.Width-System.ViewportWidth)*1.5));

        //Set vertical origin for object:
				PxObjStartY[NumberObj]=object[objectpass].Y;
				PxObjOriginY[NumberObj]= object[objectpass].Y - FloatToInt((IntToFloat(object[objectpass].Y)/IntToFloat(Room.Height))*(IntToFloat(Room.Height-System.ViewportHeight)*1.5));

      }
    
      else if (object[objectpass].GetProperty("PxPos")==-5){
        
        //Set horizontal origin for object:
			  PxObjStartX[NumberObj]= object[objectpass].X;
				PxObjOriginX[NumberObj] = object[objectpass].X - FloatToInt((IntToFloat(object[objectpass].X)/IntToFloat(Room.Width))*(IntToFloat(Room.Width-System.ViewportWidth)*2.0));

        //Set vertical origin for object:
				PxObjStartY[NumberObj]=object[objectpass].Y;
				PxObjOriginY[NumberObj]= object[objectpass].Y - FloatToInt((IntToFloat(object[objectpass].Y)/IntToFloat(Room.Height))*(IntToFloat(Room.Height-System.ViewportHeight)*2.0));
        
      }   
      
      else if (object[objectpass].GetProperty("PxPos")==-6){
        
        //Set horizontal origin for object:
			  PxObjStartX[NumberObj]= object[objectpass].X;
				PxObjOriginX[NumberObj] = object[objectpass].X - FloatToInt((IntToFloat(object[objectpass].X)/IntToFloat(Room.Width))*(IntToFloat(Room.Width-System.ViewportWidth)*2.5));

        //Set vertical origin for object:
				PxObjStartY[NumberObj]=object[objectpass].Y;
				PxObjOriginY[NumberObj]= object[objectpass].Y - FloatToInt((IntToFloat(object[objectpass].Y)/IntToFloat(Room.Height))*(IntToFloat(Room.Height-System.ViewportHeight)*2.5));
        
      } 
      
      else if (object[objectpass].GetProperty("PxPos")==7){
        
        //Set horizontal origin for object:
			  PxObjStartX[NumberObj]= object[objectpass].X;
				PxObjOriginX[NumberObj] = object[objectpass].X - FloatToInt((IntToFloat(object[objectpass].X)/IntToFloat(Room.Width))*(IntToFloat(Room.Width-System.ViewportWidth)*3.0));

        //Set vertical origin for object:
				PxObjStartY[NumberObj]=object[objectpass].Y;
				PxObjOriginY[NumberObj]= object[objectpass].Y - FloatToInt((IntToFloat(object[objectpass].Y)/IntToFloat(Room.Height))*(IntToFloat(Room.Height-System.ViewportHeight)*3.0));
        
      } 
			NumberObj++;
			
		}
		
    objectpass++;
    
   }
    
  PositionObj();

}

function SmoothScroll_PxOn(){ //A function making all parallax objects visible
  
    SmoothScroll_PxStatus=1;
    PositionObj();
    int objectpass=0;
		while (objectpass<NumberObj){
			PxObj[objectpass].Visible=true;
			objectpass++;
			}    
			
}
    
function SmoothScroll_PxOff(){ //A function making all parallax objects invisible
  
    SmoothScroll_PxStatus=0;
    int objectpass=0;
		while (objectpass<NumberObj){
			PxObj[objectpass].Visible=false;
			objectpass++;
			}    
			
}

function SmoothScroll_StopScroll(){ //Wait for the screen to stop scrolling.

  Centring = true;
  while (FloatToInt(ScrollSpeedX, eRoundNearest)!=0||FloatToInt(ScrollSpeedY, eRoundNearest)!=0) Wait(1);
  Centring = false;
  
}





function SmoothScroll_ScrollingOn(){ //A function turning the smooth scrolling effect on
  
    TargetPointX = targetCharacter.x;
    TargetPointY = GetTargetMiddleY();
    SmoothScroll_ScrollStatus = true;
			
}
    
function SmoothScroll_ScrollingOff(){ //A function turning the smooth scrolling effect off


    SmoothScroll_StopScroll();
    SmoothScroll_ScrollStatus = false;
    ReleaseViewport ();
			
}

///////////////////////
//Standard functions://
///////////////////////

function on_event (EventType event, int data){
  
	if (event==eEventEnterRoomBeforeFadein){ //When the player enters a room
  
      ScreenWidth = System.ViewportWidth; //Store the width of the screen
      ScreenHeight = System.ViewportHeight; //Store the height of the screen  
  
      HalfScreenWidth = System.ViewportWidth/2; //Store half the width of the screen
      HalfScreenHeight = System.ViewportHeight/2; //Store half the height of the screen
      
      ScrollOffsetX=0.0;
      ScrollOffsetY=0.0;
      ScrollSpeedX=0.0;
      ScrollSpeedY=0.0;
            
      TargetPosX = targetCharacter.x;
      TargetPosY = targetCharacter.y;
      
      SmoothScroll_Centre();
      SetOrigins();

            
      if (SmoothScroll_PxStatus) SmoothScroll_PxOn();
      
      else SmoothScroll_PxOff();
      
      if (SmoothScroll_ScrollStatus) SmoothScroll_ScrollingOn();
      
      else {
        SmoothScroll_ScrollingOff();
        ReleaseViewport();
      }

  }
  
  if (event==eEventLeaveRoom){//When the player exits a room
   int objectpass=0;
   
   while (objectpass<NumberObj){ //Reset the parallax objects to their original positions
     PxObj[objectpass].X=PxObjStartX[objectpass];
     PxObj[objectpass].Y=PxObjStartY[objectpass];
     objectpass++;
   }
   
  NumberObj=0; // Reset the total number of parallax objects to zero
  
  }
}

function game_start(){
  
  targetCharacter = player;
  
  system.vsync=true;
}

function repeatedly_execute_always() {

  if (targetCharacter == null) targetCharacter = player;
  if (targetCharacter.Room != player.Room) targetCharacter.ChangeRoom (player.Room);

  if (IsGamePaused()==false){
    
    //if (System.OperatingSystem != eOSLinux){

    if (SmoothScroll_ScrollStatus){



        float goalScrollSpeedX = customScrollSpeedX;
        float goalScrollSpeedY = customScrollSpeedY;
                
        Count++;
        
        if (Count == 2){

          TargetVelocityX = targetCharacter.x -TargetPosX;
          TargetVelocityY = targetCharacter.y - TargetPosY;
          
          TargetPosX = targetCharacter.x;
          TargetPosY = targetCharacter.y;
          
          Count = 0;
        }
        
        TargetScreenX = targetCharacter.x - GetViewportX();
        TargetScreenY = targetCharacter.y - GetViewportY();

        //Horizontal Scrolling:
        
        if ((TargetScreenX < (EdgeX))||TargetScreenX > (ScreenWidth-EdgeX)) ScrollingAllowedX = true;
        else ScrollingAllowedX = false; // Otherwise, don't allow scrolling.
        
        if (Centring) TargetPointX = targetCharacter.x;
        else if (ScrollingAllowedX && TargetScreenX < (EdgeX) && TargetVelocityX <= 0) TargetPointX = targetCharacter.x; // Scroll towards the player when they are at the edge of the screen
        else if (ScrollingAllowedX && TargetScreenX > (ScreenWidth-EdgeX) && TargetVelocityX >= 0) TargetPointX = targetCharacter.x; 
        else if (ScrollingAllowedX && TargetScreenX < (EdgeX) && TargetVelocityX > 0) TargetPointX = GetViewportX() + HalfScreenWidth - 6;  //Except if they change direction
        else if (ScrollingAllowedX && TargetScreenX > (ScreenWidth-EdgeX) && TargetVelocityX < 0) TargetPointX = GetViewportX() + HalfScreenWidth + 6;
        else if (ScrollSpeedX < 0.0 && TargetVelocityX > 0) TargetPointX = GetViewportX() + HalfScreenWidth - 6;
        else if (ScrollSpeedX > 0.0 && TargetVelocityX < 0) TargetPointX = GetViewportX() + HalfScreenWidth + 6;

        if (TargetPointX < HalfScreenWidth) ScrollOffsetX = IntToFloat(HalfScreenWidth) - ScreenCentreX;
        else if ((Room.Width - TargetPointX)<HalfScreenWidth) ScrollOffsetX = IntToFloat(Room.Width-HalfScreenWidth) - ScreenCentreX;
        else ScrollOffsetX = IntToFloat(TargetPointX) - ScreenCentreX;
        
        if (ScrollOffsetX > -slowDownRangeX && ScrollOffsetX < slowDownRangeX) // If the scrollOffset is within the slowDownRange...
        {
           goalScrollSpeedX = (ScrollOffsetX/slowDownRangeX)*goalScrollSpeedX; // ...then shrink the targetScrollSpeed to slow the scrolling.
        }
        else	if (ScrollOffsetX < 0.0) // If the scrollOffset is negative...
        {
          goalScrollSpeedX = -1.0 * goalScrollSpeedX; // ...make the targetScrollSpeed negative.
        }
        
        ScrollSpeedX += timeStep*(goalScrollSpeedX - ScrollSpeedX); // Increase/decrease the scrollSpeed dependent upon the targetScrollSpeed.
        

        if (Centring == false && ScrollSpeedX < 0.7 && ScrollSpeedX > -0.7) ScrollSpeedX = 0.0;
        
        
        ScreenCentreX += (timeStep*ScrollSpeedX);
        
        //Vertical Scrolling:
        
        if ((TargetScreenY - GetTargetHeight() < (EdgeY)) || (TargetScreenY > (ScreenHeight-EdgeY))) ScrollingAllowedY = true; // If the player is within the top or bottom 30% of the screen, allow scrolling.
        else ScrollingAllowedY = false;
        
        if (Centring) TargetPointY = GetTargetMiddleY();
        else if (ScrollingAllowedY && TargetScreenY - GetTargetHeight() < (EdgeY) && TargetVelocityY <= 0) TargetPointY = GetTargetMiddleY(); // Scroll towards the player when they are at the edge of the screen
        else if (ScrollingAllowedY && TargetScreenY > (ScreenHeight-EdgeY) && TargetVelocityY >= 0) TargetPointY = GetTargetMiddleY(); 
        else if (ScrollingAllowedY && TargetScreenY - GetTargetHeight() < (EdgeY) && TargetVelocityY > 0) TargetPointY = GetViewportY() + HalfScreenHeight - 6;  //Except if they change direction
        else if (ScrollingAllowedY && TargetScreenY > (ScreenHeight-EdgeY) && TargetVelocityY < 0) TargetPointY = GetViewportY() + HalfScreenHeight + 6;
        else if (ScrollSpeedY < 0.0 && TargetVelocityY > 0) TargetPointY = GetViewportY() + HalfScreenHeight - 6;
        else if (ScrollSpeedY > 0.0 && TargetVelocityY < 0) TargetPointY = GetViewportY() + HalfScreenHeight + 6;


        if (TargetPointY < HalfScreenHeight) ScrollOffsetY = IntToFloat(HalfScreenHeight) - ScreenCentreY;
        else if (Room.Height - TargetPointY<HalfScreenHeight) ScrollOffsetY = IntToFloat(Room.Height-HalfScreenHeight) - ScreenCentreY;
        else ScrollOffsetY = IntToFloat(TargetPointY) - ScreenCentreY;

        if (ScrollOffsetY > -slowDownRangeY && ScrollOffsetY < slowDownRangeY) // If the scrollOffset is within the slowDownRange...
        {
           goalScrollSpeedY = (ScrollOffsetY/slowDownRangeY)*goalScrollSpeedY; // ...then shrink the targetScrollSpeed to slow the scrolling.
        }
        else	if (ScrollOffsetY < 0.0) // If the scrollOffset is negative...
        {
          goalScrollSpeedY = -1.0 * goalScrollSpeedY; // ...make the targetScrollSpeed negative.
        }
        
        ScrollSpeedY += timeStep * (goalScrollSpeedY - ScrollSpeedY); // Increase/decrease the scrollSpeed dependent upon the targetScrollSpeed.
                    
        if (Centring == false && ScrollSpeedY < 0.7 && ScrollSpeedY > -0.7) ScrollSpeedY = 0.0; // Comment Out this line for very slow scroll speeds (doesn't look very good).
        
        ScreenCentreY += (timeStep * ScrollSpeedY); // Increase/decrease the screenCentre by a fraction of the scrollSpeed.
                    
        //Do Scrolling:
        
        SetViewport(FloatToInt(ScreenCentreX, eRoundDown) - HalfScreenWidth, FloatToInt(ScreenCentreY, eRoundDown) - HalfScreenHeight); // Set the Viewport position relative to ScreenCentreX and Y.  

    }
    //}
        
    else {
      ScreenCentreX = IntToFloat(targetCharacter.x);
      ScreenCentreY = IntToFloat(GetTargetMiddleY());
      ScrollSpeedX = 0.0;
      ScrollSpeedY = 0.0;
      ScrollOffsetX = 0.0;
      ScrollOffsetY = 0.0;
    }

    if (SmoothScroll_PxStatus){
    
    PositionObj();
    
    }	
      
  }

}

export SmoothScroll_PxStatus;
export SmoothScroll_ScrollStatus;

export ScrollOffsetX;
export ScrollOffsetY;
export ScrollSpeedX;
export ScrollSpeedY;

export ScreenCentreX;
export ScreenCentreY;

export targetCharacter;

export customScrollSpeedX;
export customScrollSpeedY;

export slowDownRangeX;
export slowDownRangeY;
